
fs=100e6;
% 滤波器参数
lowpass_num=[-0.000148487009174339,-0.000207592141342220,-0.000343332639181425,-0.000527950245819245,-0.000769034954813781,-0.00107294825020376,-0.00144410511785232,-0.00188427380736064,-0.00239176688190762,-0.00296068114858685,-0.00358020059154691,-0.00423425841809692,-0.00490112728195982,-0.00555337210566580,-0.00615804379519772,-0.00667728130439033,-0.00706915340108873,-0.00728860253771280,-0.00728908009787788,-0.00702432619431167,-0.00645009917392650,-0.00552618169437109,-0.00421872380417272,-0.00250198734114009,-0.000360255667000829,0.00221012653065130,0.00520020327271374,0.00858674794811448,0.0123324986689238,0.0163859903256302,0.0206824912025500,0.0251452230993617,0.0296872708120844,0.0342140097514942,0.0386258079177014,0.0428212223950214,0.0467001401835523,0.0501673407283212,0.0531355772674840,0.0555287672651871,0.0572847091437019,0.0583572046223329,0.0587178881604993,0.0583572046223329,0.0572847091437019,0.0555287672651871,0.0531355772674840,0.0501673407283212,0.0467001401835523,0.0428212223950214,0.0386258079177014,0.0342140097514942,0.0296872708120844,0.0251452230993617,0.0206824912025500,0.0163859903256302,0.0123324986689238,0.00858674794811448,0.00520020327271374,0.00221012653065130,-0.000360255667000829,-0.00250198734114009,-0.00421872380417272,-0.00552618169437109,-0.00645009917392650,-0.00702432619431167,-0.00728908009787788,-0.00728860253771280,-0.00706915340108873,-0.00667728130439033,-0.00615804379519772,-0.00555337210566580,-0.00490112728195982,-0.00423425841809692,-0.00358020059154691,-0.00296068114858685,-0.00239176688190762,-0.00188427380736064,-0.00144410511785232,-0.00107294825020376,-0.000769034954813781,-0.000527950245819245,-0.000343332639181425,-0.000207592141342220,-0.000148487009174339];
bandpass_Num=[0.00135636719699521,0.00209514634800672,0.00293629674639312,0.00323202789681209,0.00266540004869025,0.00119209904285051,-0.000887215620035785,-0.00301963803339111,-0.00463587520711638,-0.00542177541352284,-0.00548137549161791,-0.00527957042799919,-0.00535407120553497,-0.00592567413597648,-0.00662228085885741,-0.00650917974256977,-0.00448969339086862,5.74604542744832e-05,0.00671748711041402,0.0138859707230599,0.0192146415490252,0.0205758460530610,0.0171450682457291,0.0100806359473261,0.00233910493866534,-0.00245403441996640,-0.00172257422932891,0.00449405791618826,0.0129312538207709,0.0179463185561184,0.0137155885865647,-0.00297792260069524,-0.0305340844753492,-0.0620005503802850,-0.0867376505801054,-0.0939255086831824,-0.0767228070744115,-0.0354711447553450,0.0214343425181376,0.0795730672930372,0.122879788503027,0.138878840809953,0.122879788503027,0.0795730672930372,0.0214343425181376,-0.0354711447553450,-0.0767228070744115,-0.0939255086831824,-0.0867376505801054,-0.0620005503802850,-0.0305340844753492,-0.00297792260069524,0.0137155885865647,0.0179463185561184,0.0129312538207709,0.00449405791618826,-0.00172257422932891,-0.00245403441996640,0.00233910493866534,0.0100806359473261,0.0171450682457291,0.0205758460530610,0.0192146415490252,0.0138859707230599,0.00671748711041402,5.74604542744832e-05,-0.00448969339086862,-0.00650917974256977,-0.00662228085885741,-0.00592567413597648,-0.00535407120553497,-0.00527957042799919,-0.00548137549161791,-0.00542177541352284,-0.00463587520711638,-0.00301963803339111,-0.000887215620035785,0.00119209904285051,0.00266540004869025,0.00323202789681209,0.00293629674639312,0.00209514634800672,0.00135636719699521];
s_100_lowpass = conv(s_100,lowpass_num);
s_100_lowpass=s_100_lowpass(fix(length(lowpass_num)/2-0.5)+1:length(s_100)+fix(length(lowpass_num)/2-0.5));
s_100_lowpass_8 = resample(s_100,339,2500);
%以上进行下下采样操作，把采样频率变成的信号16倍左右,算法移植忽略上述操作
%%

% 系统参数
fs=fs*339/2500;%采样频率
fo=13.56e6/16;%副载波频率
L_sim=4;%用于计算归SNR

nnn=fix(fs/fo+0.5);%一次计算周期所需信号的步进点数
t_cn=1*L_sim;
N1=L_sim*nnn;%标准副载波信号长度
N=0:2*N1-1;
subcarrier_temp=cos(2*pi*fo/fs*N)-sin(2*pi*fo/fs*N)*1j;%用于计算副载波信号相位和幅度信息

s_100_lowpass_8_bandpass = conv(s_100_lowpass_8,bandpass_Num);
s_100_lowpass_8_bandpass=s_100_lowpass_8_bandpass(fix(length(bandpass_Num)/2-0.5)+1:length(s_100_lowpass_8)+fix(length(bandpass_Num)/2-0.5));

%调试变量
cmp_temp=[1;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;0;1];
run_cont = 0;
success_cont=0;

%%
while 1
s_TR1_sig = awgn(s_100_lowpass_8_bandpass(1:end),-5,'measured');%模拟不同的SNR的信号
run_cont=run_cont+1;

%% sof 匹配模板
temp_a=zeros(10+2*t_cn,1);
temp_a(10:10+2*t_cn)=sin(0:pi/(2*t_cn):pi);

%搜寻SOF
j=1;
amp_sy=zeros(fix(640/N1),N1+2);
l=length(temp_a);
for i=1:nnn/(t_cn/L_sim):640-N1
   
    amp_sy(j,3:end)=s_TR1_sig(i:i+N1-1);    
    conv_s=sum(amp_sy(j,3:end).*subcarrier_temp(1:N1));
    amp=abs(conv_s)/(N1/2);
    amp_sy(j,1)=amp;
    if j>l-1
        xs=amp_sy(j-l+1:j,1);
        Ea=sum((temp_a-mean(temp_a)).*(xs-mean(xs)));
        Ez = sqrt(sum((temp_a-mean(temp_a)).^2))*sqrt(sum((xs-mean(xs)).^2));
        amp_sy(j,2)=Ea/Ez;       
    end
    j=j+1;
    
end
[vN,iN]=max(amp_sy(:,2));
sof_index = (iN-t_cn-1)*nnn/(t_cn/L_sim)+1;

%%
%解调数据

%调试
%sof_index=1249;

if sof_index<length(s_TR1_sig)-6*N1
    
    data_bits_amp=zeros(fix(length(s_TR1_sig)/N1),3); %初始化
    %%
    %解调数据
    stopflag = 1;
    nj=1;
    
    %start
    data_bits_amp(nj,1) = 1;
    temp_index=sof_index;
    
    singal=s_TR1_sig(temp_index:temp_index+2*N1-1)';
    conv_s=singal.*subcarrier_temp;
    data_bits_amp(nj,2)=0.5*(abs(sum(conv_s(1:N1)))+abs(sum(conv_s(17:N1+16))));
    data_bits_amp(nj,3)=0.5*(abs(sum(conv_s(N1+1:end)))+abs(sum(conv_s(N1-15:end-16))));    
    temp_index=temp_index+2*N1;
    EA = abs(data_bits_amp(nj,2)-data_bits_amp(nj,3));
    

    nj=nj+1;
    
    while(stopflag)
        
        singal=s_TR1_sig(temp_index:temp_index+2*N1-1)';
        conv_s=singal.*subcarrier_temp;
        data_bits_amp(nj,2)=0.5*(abs(sum(conv_s(1:N1)))+abs(sum(conv_s(17:N1+16))));
        data_bits_amp(nj,3)=0.5*(abs(sum(conv_s(N1+1:end)))+abs(sum(conv_s(N1-15:end-16)))); 

        temp_index=temp_index+2*N1;
        EA = abs(data_bits_amp(nj,2)-data_bits_amp(nj,3));
        
        if(data_bits_amp(nj,2)-data_bits_amp(nj,3)>0)
            data_bits_amp(nj,1) = 1;
        else
            data_bits_amp(nj,1) = 0;
        end
        
        %防冲突操作
       %% SECTION TITLE
        %  降低误码率的方式：
        %  1：通过时序确定SOF出现区间，提高SOF的检查概率。
        %  2：不检测EOF (EOF 检测 EA的值 幅度值)
        % DESCRIPTIVE TEXT        
        %判断是否为EOF
        
        EA=(EA*(nj-1)+abs(data_bits_amp(nj,2)-data_bits_amp(nj,3)))/nj;   
        %测试
        if nj>=20
            stopflag=0;
            data_bits_amp = data_bits_amp(1:nj,:);
        end
        nj=nj+1;
        


   end
      
end

if sum(abs(cmp_temp-data_bits_amp(1:19,1)))==0
    'succes'
    success_cont = success_cont+1;
else
    'fail'
end
rate = success_cont/run_cont*100
%%
%中间变量
test_bits=data_bits_amp(1:19,:);
%二进制数据转换为十进制数据，存储在hexdate变量中
 aa=[1,2,4,8,16,32,64,128]';
 binto8 = reshape(data_bits_amp(2:19,1),9,[]);
 [asiz,bsize]=size(binto8);
 hexdate=0;
 for i=1:1:bsize
      hexdate(i) = sum(aa.*binto8(1:8,i));
 end
test_hexdate = dec2hex(hexdate,2);


end





